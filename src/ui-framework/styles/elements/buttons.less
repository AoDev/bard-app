/* stylelint-disable */

// Reset
button {
  cursor: pointer;

  &:focus,
  &:hover {
    outline: 0;
  }

  &.disabled,
  &[disabled] {
    cursor: not-allowed;

    &:focus,
    &:hover {
      cursor: not-allowed;
    }
  }
}

// Helper mixins for better DX
.idleColor(@txt-color: var(--color-txt-default), @bg-color: transparent, @border-color: var(--btn-bg-color)) {
  --btn-txt-color: @txt-color;
  --btn-bg-color: @bg-color;
  --btn-border-color: @border-color;
}

.activeColor(@txt-color: var(--btn-txt-color), @bg-color: var(--btn-bg-color), @border-color: var(--btn-bg-color)) {
  --btn-active-txt-color: @txt-color;
  --btn-active-bg-color: @bg-color;
  --btn-active-border-color: @border-color;
}

.hoverColor(@txt-color: var(--btn-txt-color), @bg-color: var(--btn-bg-color), @border-color: var(--btn-bg-color)) {
  --btn-hover-txt-color: @txt-color;
  --btn-hover-bg-color: @bg-color;
  --btn-hover-border-color: @border-color;
}

.disabledColor(@txt-color: var(--color-btn-disabled-txt), @bg-color: var(--color-btn-disabled-bg), @border-color: var(--color-btn-disabled-bg)) {
  --btn-disabled-txt-color: @txt-color;
  --btn-disabled-bg-color: @bg-color;
  --btn-disabled-border-color: @border-color;
}

.btn {
  // CSS Variables for button variants
  // Default values are set to be transparent or inherit, so a base .btn has no decoration
  .idleColor();
  .hoverColor();
  .activeColor();
  .disabledColor();

  .noselect;
  display: inline-flex;
  align-items: center;
  position: relative;
  text-decoration: none;
  line-height: 1;
  font-size: 16px;
  justify-content: center;

  // Structural styles using variables
  border: 1px solid var(--btn-border-color);
  background-color: var(--btn-bg-color);
  border-radius: 22px;
  color: var(--btn-txt-color);
  transition-property: background-color, border-color, transform, box-shadow;
  transition-duration: 0.2s;
  transition-timing-function: linear;

  .icon-svg {
    fill: var(--btn-txt-color);
  }

  .loader-bar {
    background-color: var(--btn-txt-color);
  }

  // States
  &.focus,
  &:focus-visible,
  &:hover {
    color: var(--btn-hover-txt-color);
    text-decoration: none; // in case we decorate a link
    background-color: var(--btn-hover-bg-color);
    border-color: var(--btn-hover-border-color);

    // Ensure disabled state overrides hover styles
    &.disabled,
    &:disabled {
      color: var(--btn-disabled-txt-color);
      background-color: var(--btn-disabled-bg-color);
      border-color: var(--btn-disabled-border-color);
      box-shadow: none;

      .icon-svg {
        fill: var(--btn-disabled-txt-color);
      }
    }
  }

  &.active,
  &.hover {
    text-decoration: none;
    cursor: default;
  }

  &.active {
    color: var(--btn-active-txt-color);
    background-color: var(--btn-active-bg-color);
  }

  &.disabled,
  &[disabled] {
    color: var(--btn-disabled-txt-color);
    background-color: var(--btn-disabled-bg-color);
    border-color: var(--btn-disabled-border-color);
    box-shadow: none;

    .icon-svg {
      fill: var(--btn-disabled-txt-color);
    }
  }
}

// a.btn {
//   line-height: 1; // Needed when the class is set on a link to align text
// }

// Size variants | Keep these before btn--link so that padding and height are overwritten
.btn--medium {
  height: 44px;
  padding: 0 @base-gap * 1.5;
}

.btn--narrow {
  padding: 8px 10px;
  height: auto;
}

//
// Variants: Each variant just redefines the CSS variables
//

.btn--green {
  .idleColor(var(--color-txt-inverse), var(--color-green-aim));
  .hoverColor(var(--color-txt-inverse), var(--color-green-hover));
}

.btn--red {
  .idleColor(var(--color-txt-inverse), var(--color-red-aim));
  .hoverColor(var(--color-txt-inverse), var(--color-red-hover));
}

.btn--secondary {
  .idleColor(var(--color-txt-default), var(--color-bg-alternative));
  .hoverColor(var(--color-txt-default), transparent, var(--color-txt-default));

  &.focus,
  &:focus-visible,
  &:hover {
    .shadow-button;
  }
}

.btn--primary {
  .idleColor(var(--color-txt-max-contrast), var(--color-bg-max-contrast));
  .hoverColor(var(--color-txt-max-contrast), var(--color-bg-max-contrast));
}

.btn--menu {
  .activeColor(#fff, var(--color-purple-bg));
  .hoverColor(var(--color-txt-default), var(--color-bg-alternative), transparent);
  .nowrap-truncate;
  border-radius: 12px;
  font-size: 13px;
  text-align: left;
  text-transform: uppercase;
  transition: none;
  width: 100%;
  justify-content: flex-start;
}

.btn--link {
  .idleColor(var(--color-link));
  .hoverColor(var(--color-link-hover), transparent, transparent);
  --btn-disabled-bg-color: transparent;

  border: 0;
  height: auto;
  line-height: 1.15;
  padding: 0;
  position: relative;
  vertical-align: baseline;

  &.focus,
  &:focus-visible,
  &:hover {
    text-decoration: underline;
  }
}

.btn--icon {
  @txt-color: var(--color-txt-default);
  height: auto;
  border: 0;
  background-color: transparent;
  padding: 0;
  color: @txt-color;
  transition: transform 0.2s ease-out;

  &.disabled,
  &[disabled] {
    opacity: 0.5;
    background-color: transparent;
    border-color: transparent;
  }

  &:not(.disabled) {
    &.focus,
    &:hover,
    &:focus-visible {
      transform: scale(1.1);
      background-color: var(--color-bg-alternative);
    }
  }

  .loader-bar {
    background-color: @txt-color;
  }
}

.btn--tab {
  .idleColor(var(--color-txt-default), transparent, transparent);
  .hoverColor(var(--color-txt-default), transparent, transparent);
  .disabledColor(var(--color-btn-disabled-txt), transparent, transparent);

  border: 0;
  // border-bottom: 3px solid transparent;
  text-transform: uppercase;
  font-size: 13px;

  &::after {
    content: '';
    border-bottom: 3px solid transparent;
    transition: border 0.2s ease-out;
    display: block;
    position: absolute;
    width: calc(100% - 32px);
    bottom: 0px;
    left: 16px;
  }

  &:hover,
  &:focus-visible,
  &.focus {
    &:after {
      border-bottom-color: var(--color-action--hover);
    }
  }

  &.active {
    &::after {
      border-bottom-color: var(--color-action);
    }
  }

  &.disabled,
  &[disabled] {
    &:hover,
    &.focus,
    &:focus-visible,
    &.active {
      &::after {
        border-bottom-color: var(--color-btn-disabled-bg);
      }
    }
  }
}

// Because btn--tab(s) are centered by default, override this to have left aligned tabs
.tabs--left {
  .btn--tab {
    padding: 0;

    &:after {
      margin: 0;
    }
  }
  .btn--tab + .btn--tab {
    margin-left: @base-gap;
  }
}

.btn--sticked-horizontal,
.btn--sticked-horizontal-same-width {
  white-space: nowrap;
  display: flex;
  align-items: center;

  > .btn {
    flex-shrink: 0;
    flex: auto;
  }

  > .btn:last-child {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  > .btn:first-child {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
}

.btn--sticked-horizontal-same-width {
  > .btn {
    flex-grow: 1;
    flex-basis: 0;
  }
}

.btn--sticked-vertical {
  > .btn {
    display: block;
  }

  > .btn:not(:last-child) {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }

  > .btn:not(:first-child) {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    border-top: 0;
  }
}

.btn-round {
  width: 44px;
  height: 44px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0; // Prevent shrinking when the button is inside a flex container
  padding: 0;

  &.btn--narrow {
    height: 32px;
    width: 32px;
    padding: 6px;
  }
}

.btn-round {
  border-radius: 50%;
}

.btn-loading {
  color: transparent !important;
  min-width: 44px; // for loader width

  &.btn-round {
    min-width: unset;
  }

  &.btn--icon {
    color: currentColor !important;
    .icon {
      .spin;
    }
  }
}

.btn--theader {
  .idleColor(var(--color-txt-default), transparent, transparent);

  text-transform: uppercase;
  border: 0;
  font-size: 13px;
  font-weight: bold;
  padding: 0;
  letter-spacing: 0.05em;
  height: 100%;

  &.disabled,
  &[disabled] {
    color: var(--color-btn-disabled-txt);
    background-color: transparent;
    border-color: transparent;
  }
}

.btn--with-caret {
  padding-left: 40px;
  padding-right: 40px;
}

.btn__caret-right {
  position: absolute;
  right: 14px;
}

// catch attention
.btn__dot {
  position: absolute;
  top: -2px;
  right: -2px;
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background-color: var(--color-red-aim);
}
